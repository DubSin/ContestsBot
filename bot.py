import logging
import asyncio
import random
import sys
import shutil
import os
from datetime import datetime, timedelta
import keys
from db import BoTDb
from aiogram.methods import DeleteWebhook
from aiogram import F, exceptions
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram3_calendar import SimpleCalendar, simple_cal_callback
from aiogram import Dispatcher, Bot, types
from aiogram.filters.command import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, \
    ReplyKeyboardRemove, KeyboardButton
from aiogram.methods.get_chat_member import ChatMemberMember
from utlits import get_chat_members, get_channel_members
from currency import Currency

bot_db = BoTDb('participants.db')
dp = Dispatcher(storage=MemoryStorage())

admin_markup = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='event')],
                     [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='del_event')],
                     [InlineKeyboardButton(text='–¢–µ–∫—É—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='details')],
                     [InlineKeyboardButton(text='–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data='members')],
                     [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º', callback_data='send_to_all')]
                     ])

main_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å/–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='order')],
                     [InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ ", callback_data='contest')],
                     [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å —é–∞–Ω—è", callback_data='currency')],
                     [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data='feedback')],
                     [InlineKeyboardButton(text="–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data='delivery_time')],
                     [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data='manager')]])

back_markup = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back")]])

feedback_markup = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url='https://t.me/hoops_reaction')],
                     [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back")]])

manager_markup = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', url='https://t.me/raketka_228')],
                     [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back")]])
channel_markup = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ', url='https://t.me/Hoops_shop_bot')]])

keyboard = types.ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç")]], resize_keyboard=True)

product_markup = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–ö—Ä–æ—Å—Å–æ–≤–∫–∏üëü", callback_data="prod_sneakers"),
                      InlineKeyboardButton(text="–ó–∏–º–Ω—è—è –æ–±—É–≤—åü•æüë¢", callback_data="prod_winter_shoes")],
                     [InlineKeyboardButton(text="–®—Ç–∞–Ω—ã (–¥–∂–∏–Ω—Å—ã, —Å–ø–æ—Ä—Ç–∏–≤–∫–∏)", callback_data="prod_pants"),
                      InlineKeyboardButton(text="–®–æ—Ä—Ç—ãü©≥", callback_data="prod_shorts")],
                     [InlineKeyboardButton(text="–§—É—Ç–±–æ–ª–∫–∏ –∏ –†—É–±–∞—à–∫–∏üëïüëî", callback_data="prod_shirts")],
                     [InlineKeyboardButton(text="–ú—è—á–∏üèÄ", callback_data="prod_balls"),
                      InlineKeyboardButton(text="–£–∫—Ä–∞—à–µ–Ω–∏—èüëë", callback_data="prod_decors"),
                      InlineKeyboardButton(text="–ü–∞—Ä—Ñ—é–º—ãüå∑", callback_data="prod_perfumes")],
                     [InlineKeyboardButton(text="–ö–æ—Ñ—Ç—ã –∏ —Å–≤–∏—Ç–µ—Ä–∞ü©≥", callback_data="prod_sweatshirts"),
                      InlineKeyboardButton(text="–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞üß•", callback_data="prod_jacket")],
                     [InlineKeyboardButton(text="–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µüëôüß¶", callback_data="prod_underwear"),
                      InlineKeyboardButton(text="–ê–∫—Å–µ—Å—Å—É–∞—Ä—ãüß¢üß§", callback_data="prod_accessories")],
                     [InlineKeyboardButton(text="–ú–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–∫–∞ üëõ", callback_data="prod_small_bag")],
                     [InlineKeyboardButton(text="–ë–æ–ª—å—à–∞—è —Å—É–º–∫–∞/–†—é–∫–∑–∞–∫ üß≥üéí", callback_data="prod_big_bag")],
                     [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back")]])

order_markup = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="–†–∞—Å—á–∏—Ç–∞—Ç—å –µ—â–µ", callback_data="order")],
                     [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å", callback_data="manager_order")],
                     [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back")]])

prod_dict = {"prod_sneakers": ['–ö—Ä–æ—Å–æ–≤–∫–∏', 0.5], "prod_winter_shoes": ['–ó–∏–º–Ω—è—è –æ–±—É–≤—å', 0.5],
             "prod_pants": ['–®—Ç–∞–Ω—ã', 0.5], "prod_shorts": ['–®–æ—Ä—Ç—ã', 0.5],
             "prod_shirts": ['–§—É—Ç–±–æ–ª–∫–∏ –∏ –†—É–±–∞—à–∫–∏', 0.5], "prod_balls": ['–ú—è—á–∏', 0.5],
             "prod_decors": ['–£–∫—Ä–∞—à–µ–Ω–∏—è', 0.5], "prod_perfumes": ['–ü–∞—Ä—Ñ—é–º—ã', 0.5],
             "prod_sweatshirts": ['–ö–æ—Ñ—Ç—ã –∏ —Å–≤–∏—Ç–µ—Ä–∞ü©≥', 0.5], "prod_jacket": ['–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞', 0.5],
             "prod_underwear": ['–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ', 0.5], "prod_accessories": ['–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', 0.5],
             "prod_small_bag": ['–ú–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–∫–∞', 0.5], "prod_big_bag": ['–ë–æ–ª—å—à–∞—è —Å—É–º–∫–∞/–†—é–∫–∑–∞–∫', 0.5]}


class ContestState(StatesGroup):
    time = State()
    text = State()
    image = State()
    fake = State()
    after_text = State()


class SendMembers(StatesGroup):
    text = State()
    photo = State()
    contest = State()


class OrderStates(StatesGroup):
    category = State()
    price = State()
    address = State()
    link = State()
    size = State()
    name = State()
    phone = State()


def is_admin(admin_list, message):
    admin_status = False
    for admin in admin_list:
        if admin.user.id == message.from_user.id:
            admin_status = True
            break
    return admin_status


@dp.message(Command(commands=["admin"]))
async def start_menu(message: types.Message, bot: Bot):
    admins = await bot.get_chat_administrators(chat_id=keys.HOOPS_ID)
    if is_admin(admins, message) or message.from_user.id == keys.ADMIN_ID:
        await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∞ ', reply_markup=admin_markup)


@dp.callback_query(F.data == 'details')
async def process_callback_user(callback_query: types.CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback_query.id)
    event_det = bot_db.get_event_details()
    if event_det:
        await callback_query.message.answer(f'–î–∞—Ç–∞: {event_det[1]} \n'
                                            f'–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {event_det[3]} \n'
                                            f"–§–µ–π–∫: {event_det[2] if 'n' else 'yes'} \n"
                                            f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ: {event_det[-1]}")
    else:
        await callback_query.message.answer('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≤–µ–Ω—Ç–∞')


@dp.callback_query(F.data == 'members')
async def process_callback_user(callback_query: types.CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback_query.id)
    event_memb = bot_db.get_members()
    st = ''
    if event_memb:
        for i in event_memb:
            st += f'–ù–∏–∫: {i[1]}, ID: {i[0]} \n'
        await callback_query.message.answer(st)
    else:
        await callback_query.message.answer('–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≤–µ–Ω—Ç–∞')


@dp.callback_query(F.data == 'event')
async def process_callback_user(callback_query: types.CallbackQuery, bot: Bot):
    events = bot_db.event_exists()
    if not events:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text=callback_query.message.text + '\n –í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É',
            reply_markup=await SimpleCalendar().start_calendar())
    else:
        await callback_query.answer("–£ –≤–∞—Å –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π –∏–≤–µ–Ω—Ç")
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query(F.data == 'del_event')
async def process_callback_user(callback_query: types.CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback_query.id)
    events = bot_db.event_exists()
    if events:
        bot_db.del_event()
        await callback_query.message.answer("–ì–æ—Ç–æ–≤–æ")
    else:
        await callback_query.message.answer("–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤")


@dp.callback_query(simple_cal_callback.filter())
async def process_simple_calendar(callback_query: types.CallbackQuery, callback_data: CallbackData, state: FSMContext):
    calendar = SimpleCalendar()
    selected, date = await calendar.process_selection(callback_query, callback_data)
    if selected:
        await callback_query.message.edit_text(
            callback_query.message.text + f'\n –í—ã –≤—ã–±—Ä–∞–ª–∏ {date.strftime("%d/%m/%Y")}')
        await state.update_data(date=date.strftime("%d/%m/%Y"))
        await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–æ–Ω—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ß–∞—Å:–º–∏–Ω—É—Ç–∞):")
        await state.set_state(ContestState.time)


@dp.message(ContestState.time)
async def password(message: types.Message, state: FSMContext):
    try:
        tm = datetime.strptime(message.text, '%H:%M')
        await state.update_data(time=message.text)
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await state.set_state(ContestState.text)
    except ValueError:
        await message.answer('–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')


@dp.message(ContestState.text)
async def text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º–æ–≥–æ –ª–æ—Ç–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ '-' –µ—Å–ª–∏ —Ñ–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    await state.set_state(ContestState.image)


@dp.message(ContestState.image)
async def photo(message: types.Message, state: FSMContext, bot: Bot):
    if message.photo:
        file_name = f"photos/{message.photo[-1].file_id}.jpg"
        await bot.download(message.photo[-1], destination=file_name)
        await state.update_data(image=f'{message.photo[-1].file_id}.jpg')
        await message.answer('–≠—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à? –ï—Å–ª–∏ –¥–∞ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "n"')
        await state.set_state(ContestState.fake)
    elif message.text == '-':
        await state.update_data(image='-')
        await message.answer('–≠—Ç–æ —Ñ–µ–π–∫–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à? –ï—Å–ª–∏ –¥–∞ —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "n"')
        await state.set_state(ContestState.fake)
    else:
        await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ')


@dp.message(ContestState.fake)
async def fake(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(fake=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é")
    await state.set_state(ContestState.after_text)


@dp.message(ContestState.after_text)
async def fake(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(after_text=message.text)
    dat = await state.get_data()
    bot_db.add_event(dat['date'], dat['time'], dat['text'], dat['image'], dat['fake'], dat['after_text'])
    await message.answer('–í—Å–µ –≥–æ—Ç–æ–≤–æ')
    if dat['image'] != '-':
        image = FSInputFile(f'photos/{dat["image"]}')
        await bot.send_photo(keys.HOOPS_ID, photo=image, caption=f'–í–Ω–∏–º–∞–Ω–∏–µ!!! {dat["text"]} \n'
                                                                 f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {dat["date"]} –≤ {dat["time"]}',
                             reply_markup=channel_markup)
    else:
        await bot.send_message(keys.HOOPS_ID, f'–í–Ω–∏–º–∞–Ω–∏–µ!!! {dat["text"]} \n'
                                              f'–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {dat["date"]} –≤ {dat["time"]}',
                               reply_markup=channel_markup)
    await state.clear()


@dp.callback_query(F.data == 'send_to_all')
async def process_callback_user(callback_query: types.CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã Hoops")
    await state.set_state(SendMembers.text)


@dp.message(SendMembers.text)
async def send_text(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–Ω–∞–ø–∏—à–∏—Ç–µ '-', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å)")
    await state.set_state(SendMembers.photo)


@dp.message(SendMembers.photo)
async def send_photo(message: types.Message, state: FSMContext, bot: Bot):
    feedback_members = await get_chat_members(keys.HOOPS_CHAT_ID)
    channel_members = await get_channel_members(keys.HOOPS_ID)
    members = set(feedback_members + channel_members)
    try:
        for i in members:
            print(i)
        if message.photo:
            file_name = f"photos/{message.photo[-1].file_id}.jpg"
            await bot.download(message.photo[-1], destination=file_name)
            await state.update_data(photo=f'{message.photo[-1].file_id}.jpg')
            dat = await state.get_data()
            image = FSInputFile(f'photos/{dat["photo"]}')
            for member in members:
                await bot.send_photo(member, photo=image, caption=dat['text'])
        elif message.text == '-':
            await state.update_data(photo='-')
            dat = await state.get_data()
            for member in members:
                await bot.send_message(member, dat['text'])
        else:
            await message.answer('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ')
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    except exceptions.TelegramForbiddenError:
        pass
    await state.clear()


@dp.message(Command(commands=["start"]))
async def start_menu(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é, —è Hoops Shop Bot", reply_markup=main_menu)


@dp.callback_query(F.data == "contest")
async def contest_menu(callback_query: types.CallbackQuery, bot: Bot):
    user_status = await bot.get_chat_member(chat_id=keys.HOOPS_ID, user_id=callback_query.from_user.id)
    admins = await bot.get_chat_administrators(chat_id=keys.HOOPS_ID)
    if isinstance(user_status, ChatMemberMember) or is_admin(admins, callback_query):
        if bot_db.event_exists():
            bot_db.add_user(callback_query.from_user.id, callback_query.from_user.username)
            await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text='–¢–µ–ø–µ—Ä—å –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ. –£–¥–∞—á–∏ü§ûüçÄ')
            await bot.edit_message_reply_markup(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                reply_markup=back_markup)
        else:
            await bot.edit_message_text(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                text='–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∫–æ–Ω—É—Ä—Å–æ–≤ üò¢')
            await bot.edit_message_reply_markup(
                chat_id=callback_query.from_user.id,
                message_id=callback_query.message.message_id,
                reply_markup=back_markup)
    else:
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text='–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã ü§¨')
        await bot.edit_message_reply_markup(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            reply_markup=back_markup)


@dp.callback_query(F.data == "feedback")
async def feedback_menu(callback_query: types.CallbackQuery, bot: Bot):
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text='–ë–ª–∞ –±–ª–∞ –±–ª–∞')
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=feedback_markup)


@dp.callback_query(F.data == "manager")
async def manager_menu(callback_query: types.CallbackQuery, bot: Bot):
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text='–ë–ª–∞ –±–ª–∞ –±–ª–∞')
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=manager_markup)


@dp.callback_query(F.data == "delivery_time")
async def delivery_menu(callback_query: types.CallbackQuery, bot: Bot):
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text='üöö–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n–¢–æ–≤–∞—Ä –¥–æ–µ–∑–∂–∞–µ—Ç –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ –∑–∞ 2-6 –¥–Ω–µ–π, –æ—Ç–∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ '
             '–Ω–∞—à —Å–∫–ª–∞–¥ –≤ –ú–æ—Å–∫–≤—É (—ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 12-16 –¥–Ω–µ–π), –æ—Ç–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –í–∞–º –°–î–≠–ö–æ–º, '
             '–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ')
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=back_markup)


@dp.callback_query(F.data == "currency")
async def currency_menu(callback_query: types.CallbackQuery, bot: Bot):
    cur = Currency()
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text=f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {cur.current_converted_price} \n\n‚Äº–ö—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫—É—Ä—Å–∞ '
             f'–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ë–∞–Ω–∫–∞ –†–§. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –∏–∑ —Å–∞–º—ã –≤—ã–≥–æ–¥–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µü§©')
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=back_markup)


@dp.callback_query(F.data == "back")
async def back_menu(callback_query: types.CallbackQuery, bot: Bot, state: FSMContext):
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text='–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é, —è Hoops Shop Bot')
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=main_menu)
    await state.clear()


@dp.callback_query(F.data == "order")
async def order_menu(callback_query: types.CallbackQuery, bot: Bot):
    await bot.edit_message_text(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        text='–ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—á–µ—Ç')
    await bot.edit_message_reply_markup(
        chat_id=callback_query.from_user.id,
        message_id=callback_query.message.message_id,
        reply_markup=product_markup)


@dp.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç")
async def product_handler(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Ä–∞—Å—Å—á–µ—Ç", reply_markup=product_markup)
    await state.clear()


@dp.callback_query(F.data.startswith("prod"))
async def product_handler(callback_query: types.CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(category=prod_dict[callback_query.data])
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö", reply_markup=keyboard)
    await state.set_state(OrderStates.price)


@dp.message(OrderStates.price)
async def price_state(message: types.Message, state: FSMContext):
    try:
        await state.update_data(price=int(message.text))
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")
        await state.set_state(OrderStates.address)
    except ValueError:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ")


@dp.message(OrderStates.address)
async def address_state(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    data = await state.get_data()
    cur = Currency()
    price = int(((data['price'] * cur.current_converted_price) + 56 * data['category'][1]) * 1.2)
    await message.answer(f"–î–æ—Å—Ç–≤–∞–≤–∫–∞ –¥–æ {data['address']} –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç {price} —Ä—É–±\n"
                         f"–ö—É—Ä—Å: {cur.current_converted_price}", reply_markup=order_markup)


@dp.callback_query(F.data == "manager_order")
async def manager_order_handler(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à —Ç–æ–≤–∞—Ä")
    await state.set_state(OrderStates.link)


@dp.message(OrderStates.link)
async def link_state(message: types.Message, state: FSMContext):
    await state.update_data(link=message.text)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞")
    await state.set_state(OrderStates.size)


@dp.message(OrderStates.size)
async def link_state(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
    await state.set_state(OrderStates.name)


@dp.message(OrderStates.name)
async def name_state(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏")
    await state.set_state(OrderStates.phone)


@dp.message(OrderStates.phone)
async def phone_state(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(phone=message.text)
    data = await state.get_data()
    cur = Currency()
    ru_price = int(((data['price'] * cur.current_converted_price) + 56 * data['category'][1]) * 1.2)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, —Å–∫–æ—Ä–æ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è", reply_markup=back_markup)
    await bot.send_message(keys.MANAGER_CHAT_ID, text=f"–ó–∞–∫–∞–∑ –æ—Ç {data['name']}\n"
                                                      f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category'][0]}\n"
                                                      f"–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {data['size']}\n"
                                                      f"–¶–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö: {data['price']}\n"
                                                      f"–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {ru_price}\n"
                                                      f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {data['link']}\n"
                                                      f"–ê–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['address']}\n"
                                                      f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone']}")
    await state.clear()


async def notifications(time, bot: Bot):
    while True:
        event = bot_db.get_event_details()
        members = bot_db.get_members()
        if event and members:
            date = datetime.strptime(event[1], '%d/%m/%Y %H:%M')
            delta = date - (datetime.now() + timedelta(hours=3))
            print(delta)
            if 0 <= delta.total_seconds() <= time:
                if event[4] != '-' and event[2] != 'n':
                    image = FSInputFile(f'photos/{event[4]}')
                    await bot.send_photo(keys.HOOPS_ID, photo=image,
                                         caption=f'–ü–æ–±–µ–¥–∏–ª: @{event[2]}\n' + event[-1])
                    await bot.send_photo(keys.ADMIN_ID, photo=image,
                                         caption=f'–ü–æ–±–µ–¥–∏–ª: @{event[2]}\n' + event[-1])
                    await del_photos(f'photos/{event[4]}')
                elif event[4] != '-' and event[2] == 'n':
                    winner = random.choice(members)
                    image = FSInputFile(f'photos/{event[4]}')
                    await bot.send_photo(keys.HOOPS_ID, photo=image,
                                         caption=f'–ü–æ–±–µ–¥–∏–ª: @{winner[1]}\n' + event[-1])
                    await bot.send_photo(keys.ADMIN_ID, photo=image,
                                         caption=f'–ü–æ–±–µ–¥–∏–ª: @{winner[1]}\n' + event[-1])
                    await del_photos(f'photos/{event[4]}')
                elif event[2] != 'n' and event[4] == '-':
                    await bot.send_message(keys.HOOPS_ID, f'–ü–æ–±–µ–¥–∏–ª: @{event[2]}\n' + event[-1])
                    await bot.send_message(keys.ADMIN_ID, f'–ü–æ–±–µ–¥–∏–ª: @{event[2]}\n' + event[-1])
                elif event[2] == 'n' and event[4] == '-':
                    winner = random.choice(members)
                    await bot.send_message(keys.HOOPS_ID, f'–ü–æ–±–µ–¥–∏–ª: @{winner[1]}\n' + event[-1])
                    await bot.send_message(keys.ADMIN_ID, f'–ü–æ–±–µ–¥–∏–ª: @{winner[1]}\n' + event[-1])
                bot_db.del_event()
        await asyncio.sleep(time)


async def del_photos(folder_path):
    shutil.rmtree(folder_path)
    os.mkdir(folder_path)


async def main() -> None:
    bot = Bot(token=keys.BOT_TOKEN)
    loop = asyncio.get_event_loop()
    loop.create_task(notifications(60, bot))
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if '__main__' == __name__:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
